---
# Source: policy-reporter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: policy-reporter
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.1.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
---
# Source: policy-reporter/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: policy-reporter-config
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.1.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
type: Opaque
data:
  config.yaml: Y3JkOgogIHRhcmdldENvbmZpZzogZmFsc2UKCnRhcmdldDoKICBsb2tpOgogICAgY29uZmlnOgogICAgICBob3N0OiAiIgogICAgICBjZXJ0aWZpY2F0ZTogIiIKICAgICAgc2tpcFRMUzogZmFsc2UKICAgICAgcGF0aDogIiIKICAgIG5hbWU6IAogICAgc2VjcmV0UmVmOiAiIgogICAgbW91bnRlZFNlY3JldDogIiIKICAgIG1pbmltdW1TZXZlcml0eTogIiIKICAgIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKICBlbGFzdGljc2VhcmNoOgogICAgY29uZmlnOgogICAgICBob3N0OiAiIgogICAgICBjZXJ0aWZpY2F0ZTogIiIKICAgICAgc2tpcFRMUzogZmFsc2UKICAgICAgdXNlcm5hbWU6ICIiCiAgICAgIHBhc3N3b3JkOiAiIgogICAgICBhcGlLZXk6ICIiCiAgICAgIGluZGV4OiAicG9saWN5LXJlcG9ydGVyIgogICAgICByb3RhdGlvbjogImRhaWx5IgogICAgICB0eXBlbGVzc0FwaTogImZhbHNlIgogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIHNsYWNrOgogICAgY29uZmlnOgogICAgICB3ZWJob29rOiAiIgogICAgICBjaGFubmVsOiAiIgogICAgICBjZXJ0aWZpY2F0ZTogCiAgICAgIHNraXBUTFM6IAogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIGRpc2NvcmQ6CiAgICBjb25maWc6CiAgICAgIHdlYmhvb2s6ICIiCiAgICAgIGNlcnRpZmljYXRlOiAiIgogICAgICBza2lwVExTOiBmYWxzZQogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIHRlYW1zOgogICAgY29uZmlnOgogICAgICB3ZWJob29rOiAiIgogICAgICBjZXJ0aWZpY2F0ZTogIiIKICAgICAgc2tpcFRMUzogZmFsc2UKICAgIG5hbWU6IAogICAgc2VjcmV0UmVmOiAiIgogICAgbW91bnRlZFNlY3JldDogIiIKICAgIG1pbmltdW1TZXZlcml0eTogIiIKICAgIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKICB3ZWJob29rOgogICAgY29uZmlnOgogICAgICB3ZWJob29rOiAiIgogICAgICBjZXJ0aWZpY2F0ZTogIiIKICAgICAgc2tpcFRMUzogZmFsc2UKICAgICAga2VlcGFsaXZlOgogICAgICAgIGludGVydmFsOiAiMCIKICAgIG5hbWU6IAogICAgc2VjcmV0UmVmOiAiIgogICAgbW91bnRlZFNlY3JldDogIiIKICAgIG1pbmltdW1TZXZlcml0eTogIiIKICAgIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKICB0ZWxlZ3JhbToKICAgIGNvbmZpZzoKICAgICAgY2hhdElkOiAiIgogICAgICB0b2tlbjogIiIKICAgICAgd2ViaG9vazogCiAgICAgIGNlcnRpZmljYXRlOiAiIgogICAgICBza2lwVExTOiBmYWxzZQogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIGdvb2dsZUNoYXQ6CiAgICBjb25maWc6CiAgICAgIHdlYmhvb2s6ICIiCiAgICAgIGNlcnRpZmljYXRlOiAiIgogICAgICBza2lwVExTOiBmYWxzZQogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIGppcmE6CiAgICBjb25maWc6CiAgICAgIGhvc3Q6ICIiCiAgICAgIHVzZXJuYW1lOiAiIgogICAgICBwYXNzd29yZDogIiIKICAgICAgYXBpVG9rZW46ICIiCiAgICAgIHByb2plY3RLZXk6ICIiCiAgICAgIGlzc3VlVHlwZTogIiIKICAgICAgY2VydGlmaWNhdGU6ICIiCiAgICAgIHNraXBUTFM6IGZhbHNlCiAgICBuYW1lOiAKICAgIHNlY3JldFJlZjogIiIKICAgIG1vdW50ZWRTZWNyZXQ6ICIiCiAgICBtaW5pbXVtU2V2ZXJpdHk6ICIiCiAgICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCiAgYWxlcnRNYW5hZ2VyOgogICAgY29uZmlnOgogICAgICBob3N0OiAiIgogICAgICBjZXJ0aWZpY2F0ZTogIiIKICAgICAgc2tpcFRMUzogZmFsc2UKICAgIG5hbWU6IAogICAgc2VjcmV0UmVmOiAiIgogICAgbW91bnRlZFNlY3JldDogIiIKICAgIG1pbmltdW1TZXZlcml0eTogIiIKICAgIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKICBzMzoKICAgIGNvbmZpZzoKICAgICAgYWNjZXNzS2V5SWQ6IAogICAgICBzZWNyZXRBY2Nlc3NLZXk6ICAKICAgICAgcmVnaW9uOiAKICAgICAgZW5kcG9pbnQ6IAogICAgICBidWNrZXQ6IAogICAgICBidWNrZXRLZXlFbmFibGVkOiBmYWxzZQogICAgICBrbXNLZXlJZDogCiAgICAgIHNlcnZlclNpZGVFbmNyeXB0aW9uOiAKICAgICAgcGF0aFN0eWxlOiBmYWxzZQogICAgICBwcmVmaXg6IAogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIGtpbmVzaXM6CiAgICBjb25maWc6CiAgICAgIGFjY2Vzc0tleUlkOiAKICAgICAgc2VjcmV0QWNjZXNzS2V5OiAgCiAgICAgIHJlZ2lvbjogCiAgICAgIGVuZHBvaW50OiAKICAgICAgc3RyZWFtTmFtZTogCiAgICBuYW1lOiAKICAgIHNlY3JldFJlZjogIiIKICAgIG1vdW50ZWRTZWNyZXQ6ICIiCiAgICBtaW5pbXVtU2V2ZXJpdHk6ICIiCiAgICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCiAgc2VjdXJpdHlIdWI6CiAgICBjb25maWc6CiAgICAgIGFjY2Vzc0tleUlkOiAiIgogICAgICBzZWNyZXRBY2Nlc3NLZXk6ICAiIgogICAgICByZWdpb246IAogICAgICBlbmRwb2ludDogCiAgICAgIGFjY291bnRJZDogIiIKICAgICAgcHJvZHVjdE5hbWU6IAogICAgICBjb21wYW55TmFtZTogCiAgICAgIGRlbGF5SW5TZWNvbmRzOiAyCiAgICAgIHN5bmNocm9uaXplOiB0cnVlCiAgICBuYW1lOiAKICAgIHNlY3JldFJlZjogIiIKICAgIG1vdW50ZWRTZWNyZXQ6ICIiCiAgICBtaW5pbXVtU2V2ZXJpdHk6ICIiCiAgICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCiAgZ2NzOgogICAgY29uZmlnOgogICAgICBjcmVkZW50aWFsczogCiAgICAgIGJ1Y2tldDogCiAgICAgIHByZWZpeDogCiAgICBuYW1lOiAKICAgIHNlY3JldFJlZjogIiIKICAgIG1vdW50ZWRTZWNyZXQ6ICIiCiAgICBtaW5pbXVtU2V2ZXJpdHk6ICIiCiAgICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCndvcmtlcjogNQptZXRyaWNzOgogIGN1c3RvbUxhYmVsczogW10KICBlbmFibGVkOiB0cnVlCiAgZmlsdGVyOiB7fQogIG1vZGU6IGRldGFpbGVkCnNvdXJjZUZpbHRlcnM6CiAgLSBkaXNhYmxlQ2x1c3RlclJlcG9ydHM6IGZhbHNlCiAgICBraW5kczoKICAgICAgZXhjbHVkZToKICAgICAgLSBSZXBsaWNhU2V0CiAgICBzZWxlY3RvcjoKICAgICAgc291cmNlOiBreXZlcm5vCiAgICB1bmNvbnRyb2xsZWRPbmx5OiB0cnVlCgpsZWFkZXJFbGVjdGlvbjoKICBlbmFibGVkOiBmYWxzZQogIHJlbGVhc2VPbkNhbmNlbDogdHJ1ZQogIGxlYXNlRHVyYXRpb246IDE1CiAgcmVuZXdEZWFkbGluZTogMTAKICByZXRyeVBlcmlvZDogMgpyZWRpczoKICBhZGRyZXNzOiAiIgogIGRhdGFiYXNlOiAwCiAgZW5hYmxlZDogZmFsc2UKICBwYXNzd29yZDogIiIKICBwcmVmaXg6IHBvbGljeS1yZXBvcnRlcgogIHVzZXJuYW1lOiAiIgoKbG9nZ2luZzoKICBzZXJ2ZXI6IGZhbHNlCiAgZW5jb2Rpbmc6IGNvbnNvbGUKICBsb2dMZXZlbDogMAoKYXBpOgogIGJhc2ljQXV0aDoKICAgIHVzZXJuYW1lOiAKICAgIHBhc3N3b3JkOiAKICAgIHNlY3JldFJlZjogCgpkYXRhYmFzZToKICB0eXBlOiAKICBkYXRhYmFzZTogCiAgdXNlcm5hbWU6IAogIHBhc3N3b3JkOiAKICBob3N0OiAKICBlbmFibGVTU0w6IGZhbHNlCiAgZHNuOiAKICBzZWNyZXRSZWY6IAogIG1vdW50ZWRTZWNyZXQ6IAo=
---
# Source: policy-reporter/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.1.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
  name: policy-reporter
rules:
- apiGroups:
  - '*'
  resources:
  - policyreports
  - policyreports/status
  - clusterpolicyreports
  - clusterpolicyreports/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ''
  resources:
  - namespaces
  verbs:
  - list
- apiGroups:
  - policyreporter.kyverno.io
  resources:
  - targetconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ''
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - 'batch'
  resources:
  - jobs
  verbs:
  - get
---
# Source: policy-reporter/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.1.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
roleRef:
  kind: ClusterRole
  name: policy-reporter
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: policy-reporter
  namespace: policy-reporter
---
# Source: policy-reporter/templates/secret-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.1.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
  name: policy-reporter-secret-reader
  namespace: policy-reporter
rules:
- apiGroups: ['']
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: policy-reporter/templates/secret-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: policy-reporter-secret-reader
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.1.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
roleRef:
  kind: Role
  name: policy-reporter-secret-reader
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: policy-reporter
  namespace: policy-reporter
---
# Source: policy-reporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: policy-reporter
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.1.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
---
# Source: policy-reporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-reporter
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.1.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-reporter
      app.kubernetes.io/instance: policy-reporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: policy-reporter
        app.kubernetes.io/instance: policy-reporter
        app.kubernetes.io/version: "3.1.1"
        app.kubernetes.io/part-of: policy-reporter
      annotations:
        checksum/secret: "31d3c71e4e121ba591760950b94b81f82f9a1cbfdc433cf7b33684775be1eed7"
    spec:
      serviceAccountName: policy-reporter
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 1234
      containers:
        - name: policy-reporter
          image: "ghcr.io/kyverno/policy-reporter:3.1.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1234
            seccompProfile:
              type: RuntimeDefault
          args:
            - --port=8080
            - --config=/app/config.yaml
            - --dbfile=/sqlite/database.db
            - --metrics-enabled=true
            - --rest-enabled=true
            - --profile=false
            - --lease-name=policy-reporter
            - --template-dir=/app/templates
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
          volumeMounts:
          - name: sqlite
            mountPath: /sqlite
          - name: config-file
            mountPath: /app/config.yaml
            subPath: config.yaml
            readOnly: true
          - name: tmp
            mountPath: /tmp
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
      volumes:
      - name: sqlite
        emptyDir: {}
      - name: config-file
        secret:
          secretName: policy-reporter-config
          optional: true
      - name: tmp
        emptyDir: {}
