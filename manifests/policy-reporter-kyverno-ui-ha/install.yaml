---
# Source: policy-reporter/templates/plugins/kyverno/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: policy-reporter-kyverno-plugin
  labels:
    app.kubernetes.io/name: policy-reporter-kyverno-plugin
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
spec:  
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-reporter-kyverno-plugin
      app.kubernetes.io/instance: policy-reporter
---
# Source: policy-reporter/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: policy-reporter
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
spec:  
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-reporter
      app.kubernetes.io/instance: policy-reporter
---
# Source: policy-reporter/templates/ui/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: policy-reporter-ui
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-ui
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
spec:  
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-reporter-ui
      app.kubernetes.io/instance: policy-reporter
---
# Source: policy-reporter/templates/plugins/kyverno/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: policy-reporter-kyverno-plugin
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-kyverno-plugin
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
automountServiceAccountToken: true
---
# Source: policy-reporter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: policy-reporter
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
---
# Source: policy-reporter/templates/ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: policy-reporter-ui
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-ui
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
automountServiceAccountToken: true
---
# Source: policy-reporter/templates/cluster-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: policy-reporter-ui-default-cluster
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
type: Opaque
data:
  host: aHR0cDovL3BvbGljeS1yZXBvcnRlcjo4MDgw
  plugin.kyverno: eyJob3N0IjoiaHR0cDovL3BvbGljeS1yZXBvcnRlci1reXZlcm5vLXBsdWdpbjo4MDgwIiwgIm5hbWUiOiJreXZlcm5vIiwgInVzZXJuYW1lIjoiIiwgInBhc3N3b3JkIjoiIn0=
---
# Source: policy-reporter/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: policy-reporter-config
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
type: Opaque
data:
  config.yaml: Y3JkOgogIHRhcmdldENvbmZpZzogZmFsc2UKCnRhcmdldDoKICBsb2tpOgogICAgY29uZmlnOgogICAgICBob3N0OiAiIgogICAgICBjZXJ0aWZpY2F0ZTogIiIKICAgICAgc2tpcFRMUzogZmFsc2UKICAgICAgcGF0aDogIiIKICAgIG5hbWU6IAogICAgc2VjcmV0UmVmOiAiIgogICAgbW91bnRlZFNlY3JldDogIiIKICAgIG1pbmltdW1TZXZlcml0eTogIiIKICAgIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKICBlbGFzdGljc2VhcmNoOgogICAgY29uZmlnOgogICAgICBob3N0OiAiIgogICAgICBjZXJ0aWZpY2F0ZTogIiIKICAgICAgc2tpcFRMUzogZmFsc2UKICAgICAgdXNlcm5hbWU6ICIiCiAgICAgIHBhc3N3b3JkOiAiIgogICAgICBhcGlLZXk6ICIiCiAgICAgIGluZGV4OiAicG9saWN5LXJlcG9ydGVyIgogICAgICByb3RhdGlvbjogImRhaWx5IgogICAgICB0eXBlbGVzc0FwaTogImZhbHNlIgogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIHNsYWNrOgogICAgY29uZmlnOgogICAgICB3ZWJob29rOiAiIgogICAgICBjaGFubmVsOiAiIgogICAgICBjZXJ0aWZpY2F0ZTogCiAgICAgIHNraXBUTFM6IAogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIGRpc2NvcmQ6CiAgICBjb25maWc6CiAgICAgIHdlYmhvb2s6ICIiCiAgICAgIGNlcnRpZmljYXRlOiAiIgogICAgICBza2lwVExTOiBmYWxzZQogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIHRlYW1zOgogICAgY29uZmlnOgogICAgICB3ZWJob29rOiAiIgogICAgICBjZXJ0aWZpY2F0ZTogIiIKICAgICAgc2tpcFRMUzogZmFsc2UKICAgIG5hbWU6IAogICAgc2VjcmV0UmVmOiAiIgogICAgbW91bnRlZFNlY3JldDogIiIKICAgIG1pbmltdW1TZXZlcml0eTogIiIKICAgIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKICB3ZWJob29rOgogICAgY29uZmlnOgogICAgICB3ZWJob29rOiAiIgogICAgICBjZXJ0aWZpY2F0ZTogIiIKICAgICAgc2tpcFRMUzogZmFsc2UKICAgICAga2VlcGFsaXZlOgogICAgICAgIGludGVydmFsOiAiMCIKICAgIG5hbWU6IAogICAgc2VjcmV0UmVmOiAiIgogICAgbW91bnRlZFNlY3JldDogIiIKICAgIG1pbmltdW1TZXZlcml0eTogIiIKICAgIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKICB0ZWxlZ3JhbToKICAgIGNvbmZpZzoKICAgICAgY2hhdElkOiAiIgogICAgICB0b2tlbjogIiIKICAgICAgd2ViaG9vazogCiAgICAgIGNlcnRpZmljYXRlOiAiIgogICAgICBza2lwVExTOiBmYWxzZQogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIGdvb2dsZUNoYXQ6CiAgICBjb25maWc6CiAgICAgIHdlYmhvb2s6ICIiCiAgICAgIGNlcnRpZmljYXRlOiAiIgogICAgICBza2lwVExTOiBmYWxzZQogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIGppcmE6CiAgICBjb25maWc6CiAgICAgIGhvc3Q6ICIiCiAgICAgIHVzZXJuYW1lOiAiIgogICAgICBwYXNzd29yZDogIiIKICAgICAgYXBpVG9rZW46ICIiCiAgICAgIGFwaVZlcnNpb246ICJ2MyIKICAgICAgc3VtbWFyeVRlbXBsYXRlOiAiIgogICAgICBwcm9qZWN0S2V5OiAiIgogICAgICBpc3N1ZVR5cGU6ICIiCiAgICAgIGNlcnRpZmljYXRlOiAiIgogICAgICBza2lwVExTOiBmYWxzZQogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIGFsZXJ0TWFuYWdlcjoKICAgIGNvbmZpZzoKICAgICAgaG9zdDogIiIKICAgICAgY2VydGlmaWNhdGU6ICIiCiAgICAgIHNraXBUTFM6IGZhbHNlCiAgICBuYW1lOiAKICAgIHNlY3JldFJlZjogIiIKICAgIG1vdW50ZWRTZWNyZXQ6ICIiCiAgICBtaW5pbXVtU2V2ZXJpdHk6ICIiCiAgICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCiAgczM6CiAgICBjb25maWc6CiAgICAgIGFjY2Vzc0tleUlkOiAKICAgICAgc2VjcmV0QWNjZXNzS2V5OiAgCiAgICAgIHJlZ2lvbjogCiAgICAgIGVuZHBvaW50OiAKICAgICAgYnVja2V0OiAKICAgICAgYnVja2V0S2V5RW5hYmxlZDogZmFsc2UKICAgICAga21zS2V5SWQ6IAogICAgICBzZXJ2ZXJTaWRlRW5jcnlwdGlvbjogCiAgICAgIHBhdGhTdHlsZTogZmFsc2UKICAgICAgcHJlZml4OiAKICAgIG5hbWU6IAogICAgc2VjcmV0UmVmOiAiIgogICAgbW91bnRlZFNlY3JldDogIiIKICAgIG1pbmltdW1TZXZlcml0eTogIiIKICAgIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKICBraW5lc2lzOgogICAgY29uZmlnOgogICAgICBhY2Nlc3NLZXlJZDogCiAgICAgIHNlY3JldEFjY2Vzc0tleTogIAogICAgICByZWdpb246IAogICAgICBlbmRwb2ludDogCiAgICAgIHN0cmVhbU5hbWU6IAogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIHNlY3VyaXR5SHViOgogICAgY29uZmlnOgogICAgICBhY2Nlc3NLZXlJZDogIiIKICAgICAgc2VjcmV0QWNjZXNzS2V5OiAgIiIKICAgICAgcmVnaW9uOiAKICAgICAgZW5kcG9pbnQ6IAogICAgICBhY2NvdW50SWQ6ICIiCiAgICAgIHByb2R1Y3ROYW1lOiAKICAgICAgY29tcGFueU5hbWU6IAogICAgICBkZWxheUluU2Vjb25kczogMgogICAgICBzeW5jaHJvbml6ZTogdHJ1ZQogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgogIGdjczoKICAgIGNvbmZpZzoKICAgICAgY3JlZGVudGlhbHM6IAogICAgICBidWNrZXQ6IAogICAgICBwcmVmaXg6IAogICAgbmFtZTogCiAgICBzZWNyZXRSZWY6ICIiCiAgICBtb3VudGVkU2VjcmV0OiAiIgogICAgbWluaW11bVNldmVyaXR5OiAiIgogICAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgp3b3JrZXI6IDUKbWV0cmljczoKICBjdXN0b21MYWJlbHM6IFtdCiAgZW5hYmxlZDogdHJ1ZQogIGZpbHRlcjoge30KICBtb2RlOiBkZXRhaWxlZApzb3VyY2VGaWx0ZXJzOgogIC0gZGlzYWJsZUNsdXN0ZXJSZXBvcnRzOiBmYWxzZQogICAga2luZHM6CiAgICAgIGV4Y2x1ZGU6CiAgICAgIC0gUmVwbGljYVNldAogICAgc2VsZWN0b3I6CiAgICAgIHNvdXJjZToga3l2ZXJubwogICAgdW5jb250cm9sbGVkT25seTogdHJ1ZQogIC0gZGlzYWJsZUNsdXN0ZXJSZXBvcnRzOiBmYWxzZQogICAga2luZHM6CiAgICAgIGV4Y2x1ZGU6CiAgICAgIC0gUmVwbGljYVNldAogICAgc2VsZWN0b3I6CiAgICAgIHNvdXJjZTogS3l2ZXJub1ZhbGlkYXRpbmdQb2xpY3kKICAgIHVuY29udHJvbGxlZE9ubHk6IHRydWUKCmxlYWRlckVsZWN0aW9uOgogIGVuYWJsZWQ6IHRydWUKICByZWxlYXNlT25DYW5jZWw6IHRydWUKICBsZWFzZUR1cmF0aW9uOiAxNQogIHJlbmV3RGVhZGxpbmU6IDEwCiAgcmV0cnlQZXJpb2Q6IDIKcmVkaXM6CiAgYWRkcmVzczogIiIKICBkYXRhYmFzZTogMAogIGVuYWJsZWQ6IGZhbHNlCiAgcGFzc3dvcmQ6ICIiCiAgcHJlZml4OiBwb2xpY3ktcmVwb3J0ZXIKICB1c2VybmFtZTogIiIKCmxvZ2dpbmc6CiAgc2VydmVyOiBmYWxzZQogIGVuY29kaW5nOiBjb25zb2xlCiAgbG9nTGV2ZWw6IDAKCmFwaToKICBiYXNpY0F1dGg6CiAgICB1c2VybmFtZTogCiAgICBwYXNzd29yZDogCiAgICBzZWNyZXRSZWY6IAoKZGF0YWJhc2U6CiAgdHlwZTogCiAgZGF0YWJhc2U6IAogIHVzZXJuYW1lOiAKICBwYXNzd29yZDogCiAgaG9zdDogCiAgZW5hYmxlU1NMOiBmYWxzZQogIGRzbjogCiAgc2VjcmV0UmVmOiAKICBtb3VudGVkU2VjcmV0OiAKcGVyaW9kaWNTeW5jOgogIGVuYWJsZWQ6IGZhbHNlCiAgaW50ZXJ2YWw6IDMwCg==
---
# Source: policy-reporter/templates/plugins/kyverno/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: policy-reporter-kyverno-plugin-config
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-kyverno-plugin
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
type: Opaque
data:
  config.yaml: bGVhZGVyRWxlY3Rpb246CiAgZW5hYmxlZDogdHJ1ZQogIHJlbGVhc2VPbkNhbmNlbDogdHJ1ZQogIGxlYXNlRHVyYXRpb246IDE1CiAgcmVuZXdEZWFkbGluZTogMTAKICByZXRyeVBlcmlvZDogMgogIGxvY2tOYW1lOiBreXZlcm5vLXBsdWdpbgoKbG9nZ2luZzoKICBhcGk6IGZhbHNlCiAgc2VydmVyOiBmYWxzZQogIGVuY29kaW5nOiBjb25zb2xlCiAgbG9nTGV2ZWw6IDAKCnNlcnZlcjoKICBiYXNpY0F1dGg6CiAgICB1c2VybmFtZTogCiAgICBwYXNzd29yZDogCiAgICBzZWNyZXRSZWY6IAoKY29yZToKICBob3N0OiBodHRwOi8vcG9saWN5LXJlcG9ydGVyOjgwODAKYmxvY2tSZXBvcnRzOgogICAgZW5hYmxlZDogZmFsc2UKICAgIGV2ZW50TmFtZXNwYWNlOiBkZWZhdWx0CiAgICBwb2xpY3lSZXBvcnQ6CiAgICAgIGFubm90YXRpb25zOiBbXQogICAgICBsYWJlbHM6IFtdCiAgICByZXN1bHRzOgogICAgICBrZWVwT25seUxhdGVzdDogZmFsc2UKICAgICAgbWF4UGVyUmVwb3J0OiAyMDAKICAgIHNvdXJjZTogS3l2ZXJubyBFdmVudAo=
---
# Source: policy-reporter/templates/ui/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: policy-reporter-ui-config
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-ui
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
type: Opaque
data:
  config.yaml: bG9nZ2luZzoKICBhcGk6IGZhbHNlCiAgc2VydmVyOiBmYWxzZQogIGVuY29kaW5nOiBjb25zb2xlCiAgbG9nTGV2ZWw6IDAKCnNlcnZlcjoKICBwb3J0OiA4MDgwCiAgY29yczogdHJ1ZQogIG92ZXJ3cml0ZUhvc3Q6IHRydWUKICBzZXNzaW9uczoKICAgIHN0b3JhZ2U6IGZpbGVzeXN0ZW0KICAgIHRlbXBEaXI6IC90bXAKCnVpOgogIGRpc3BsYXlNb2RlOiAKICBiYW5uZXI6IAogIGxvZ286CiAgICBwYXRoOiAKICAgIGRpc2FibGVkOiBmYWxzZQoKY2x1c3RlcnM6CiAgLSBuYW1lOiBEZWZhdWx0CiAgICBzZWNyZXRSZWY6IHBvbGljeS1yZXBvcnRlci11aS1kZWZhdWx0LWNsdXN0ZXIKCnNvdXJjZXM6CiAgLSBuYW1lOiBreXZlcm5vCiAgICB0eXBlOiByZXN1bHQKICAgIGV4Y2VwdGlvbnM6IGZhbHNlCiAgICBleGNsdWRlczoKICAgICAgcmVzdWx0czoKICAgICAgLSB3YXJuCiAgICAgIC0gZXJyb3IKICAtIG5hbWU6IEt5dmVybm9WYWxpZGF0aW5nUG9saWN5CiAgICB0eXBlOiByZXN1bHQKICAgIGV4Y2VwdGlvbnM6IGZhbHNlCiAgICBleGNsdWRlczoKICAgICAgcmVzdWx0czoKICAgICAgLSB3YXJuCiAgICAgIC0gZXJyb3IKb3BlbklEQ29ubmVjdDoKICAgIGNhbGxiYWNrVXJsOiAiIgogICAgY2VydGlmaWNhdGU6ICIiCiAgICBjbGllbnRJZDogIiIKICAgIGNsaWVudFNlY3JldDogIiIKICAgIGRpc2NvdmVyeVVybDogIiIKICAgIGVuYWJsZWQ6IGZhbHNlCiAgICBncm91cENsYWltOiAiIgogICAgc2NvcGVzOiBbXQogICAgc2VjcmV0UmVmOiAiIgogICAgc2tpcFRMUzogZmFsc2UKb2F1dGg6CiAgICBjYWxsYmFja1VybDogIiIKICAgIGNsaWVudElkOiAiIgogICAgY2xpZW50U2VjcmV0OiAiIgogICAgZW5hYmxlZDogZmFsc2UKICAgIHByb3ZpZGVyOiAiIgogICAgc2NvcGVzOiBbXQogICAgc2VjcmV0UmVmOiAiIgo=
---
# Source: policy-reporter/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
  name: policy-reporter
rules:
- apiGroups:
  - 'openreports.io'
  resources:
  - reports
  - reports/status
  - clusterreports
  - clusterreports/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - '*'
  resources:
  - policyreports
  - policyreports/status
  - clusterpolicyreports
  - clusterpolicyreports/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ''
  resources:
  - namespaces
  verbs:
  - list
- apiGroups:
  - policyreporter.kyverno.io
  resources:
  - targetconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ''
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - 'batch'
  resources:
  - jobs
  verbs:
  - get
---
# Source: policy-reporter/templates/plugins/kyverno/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    app.kubernetes.io/name: policy-reporter-kyverno-plugin
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
  name: policy-reporter-kyverno-plugin
rules:
- apiGroups:
  - '*'
  resources:
  - policies
  - policies/status
  - clusterpolicies
  - clusterpolicies/status
  verbs:
  - get
  - list
---
# Source: policy-reporter/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
roleRef:
  kind: ClusterRole
  name: policy-reporter
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: policy-reporter
  namespace: policy-reporter
---
# Source: policy-reporter/templates/plugins/kyverno/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: policy-reporter-kyverno-plugin
  labels:
    app.kubernetes.io/name: policy-reporter-kyverno-plugin
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
roleRef:
  kind: ClusterRole
  name: policy-reporter-kyverno-plugin
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: policy-reporter-kyverno-plugin
  namespace: policy-reporter
---
# Source: policy-reporter/templates/plugins/kyverno/secret-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: policy-reporter-kyverno-plugin
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
  name: policy-reporter-kyverno-plugin-secret-reader
  namespace: policy-reporter
rules:
- apiGroups: ['']
  resources:
  - secrets
  verbs:
  - get
---
# Source: policy-reporter/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
  name: policy-reporter-leaderelection
  namespace: policy-reporter
rules:
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - delete
  - get
  - patch
  - update
---
# Source: policy-reporter/templates/secret-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
  name: policy-reporter-secret-reader
  namespace: policy-reporter
rules:
- apiGroups: ['']
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: policy-reporter/templates/ui/secret-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: policy-reporter-ui
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
  name: policy-reporter-ui-secret-reader
  namespace: policy-reporter
rules:
- apiGroups: ['']
  resources:
  - secrets
  verbs:
  - get
---
# Source: policy-reporter/templates/plugins/kyverno/secret-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: policy-reporter-kyverno-plugin-secret-reader
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-kyverno-plugin
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
roleRef:
  kind: Role
  name: policy-reporter-kyverno-plugin-secret-reader
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: policy-reporter-kyverno-plugin
  namespace: policy-reporter
---
# Source: policy-reporter/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: policy-reporter-leaderelection
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
roleRef:
  kind: Role
  name: policy-reporter-leaderelection
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: policy-reporter
  namespace: policy-reporter
---
# Source: policy-reporter/templates/secret-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: policy-reporter-secret-reader
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
roleRef:
  kind: Role
  name: policy-reporter-secret-reader
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: policy-reporter
  namespace: policy-reporter
---
# Source: policy-reporter/templates/ui/secret-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: policy-reporter-ui-secret-reader
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-ui
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
roleRef:
  kind: Role
  name: policy-reporter-ui-secret-reader
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: policy-reporter-ui
  namespace: policy-reporter
---
# Source: policy-reporter/templates/plugins/kyverno/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: policy-reporter-kyverno-plugin
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-kyverno-plugin
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: policy-reporter-kyverno-plugin
    app.kubernetes.io/instance: policy-reporter
---
# Source: policy-reporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: policy-reporter
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
---
# Source: policy-reporter/templates/ui/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: policy-reporter-ui
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-ui
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: policy-reporter-ui
    app.kubernetes.io/instance: policy-reporter
---
# Source: policy-reporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-reporter
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-reporter
      app.kubernetes.io/instance: policy-reporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: policy-reporter
        app.kubernetes.io/instance: policy-reporter
        app.kubernetes.io/version: "3.4.1"
        app.kubernetes.io/part-of: policy-reporter
      annotations:
        checksum/secret: "d1cf9b31b9811a98ad9f45d150dc54bd49cfa2ed9a186a17899153539df02918"
    spec:
      serviceAccountName: policy-reporter
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 1234
      containers:
        - name: policy-reporter
          image: "ghcr.io/kyverno/policy-reporter:3.4.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1234
            seccompProfile:
              type: RuntimeDefault
          args:
            - --port=8080
            - --config=/app/config.yaml
            - --dbfile=/sqlite/database.db
            - --metrics-enabled=true
            - --rest-enabled=true
            - --profile=false
            - --lease-name=policy-reporter
            - --template-dir=/app/templates
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
          volumeMounts:
          - name: sqlite
            mountPath: /sqlite
          - name: config-file
            mountPath: /app/config.yaml
            subPath: config.yaml
            readOnly: true
          - name: tmp
            mountPath: /tmp
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
      volumes:
      - name: sqlite
        emptyDir: {}
      - name: config-file
        secret:
          secretName: policy-reporter-config
          optional: true
      - name: tmp
        emptyDir: {}
---
# Source: policy-reporter/templates/plugins/kyverno/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-reporter-kyverno-plugin
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-kyverno-plugin
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-reporter-kyverno-plugin
      app.kubernetes.io/instance: policy-reporter
  template:
    metadata:
      annotations:
        checksum/secret: "f6405f8112c1814f2ab1c0650d8e21f692eefa4df1731ea265dadee037a8bd45"
      labels:
        app.kubernetes.io/name: policy-reporter-kyverno-plugin
        app.kubernetes.io/instance: policy-reporter
        app.kubernetes.io/version: "3.4.1"
    spec:
      serviceAccountName: policy-reporter-kyverno-plugin
      automountServiceAccountToken: true
      securityContext:
        runAsGroup: 1234
        runAsUser: 1234
      containers:
        - name: policy-reporter-kyverno-plugin
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1234
            seccompProfile:
              type: RuntimeDefault
          image: "ghcr.io/kyverno/policy-reporter/kyverno-plugin:0.5.0"
          imagePullPolicy: IfNotPresent
          args:
            - run
            - --config=/app/config.yaml
            - --port=8080
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/policies
              port: http
          readinessProbe:
            httpGet:
              path: /v1/policies
              port: http
          resources:
            {}
          volumeMounts:
          - name: config-file
            mountPath: /app/config.yaml
            subPath: config.yaml
            readOnly: true
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
      volumes:
      - name: config-file
        secret:
          secretName: policy-reporter-kyverno-plugin-config
          optional: true
---
# Source: policy-reporter/templates/ui/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-reporter-ui
  namespace: policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter-ui
    app.kubernetes.io/instance: policy-reporter
    app.kubernetes.io/version: "3.4.1"
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-reporter-ui
      app.kubernetes.io/instance: policy-reporter
  template:
    metadata:
      annotations:
        checksum/secret: "e7cd5b4af51fe702029b718fef1a053fa7276b5077c4a7095e2ab668ad4cf8a2"
        checksum/cluster-secret: "fe169d2cab1732074ff92f97aa03f4c83f4a506991a8929253a8f84d55481159"
      labels:
        app.kubernetes.io/name: policy-reporter-ui
        app.kubernetes.io/instance: policy-reporter
        app.kubernetes.io/version: "3.4.1"
    spec:
      serviceAccountName: policy-reporter-ui
      automountServiceAccountToken: true
      securityContext:
        runAsGroup: 1234
        runAsUser: 1234
      containers:
        - name: policy-reporter-ui
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1234
            seccompProfile:
              type: RuntimeDefault
          image: "ghcr.io/kyverno/policy-reporter-ui:2.4.2"
          imagePullPolicy: IfNotPresent
          args:
            - run
            - --config=/app/config.yaml
            - --port=8080
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
          volumeMounts:
          - name: config-file
            mountPath: /app/config.yaml
            subPath: config.yaml
            readOnly: true
          - name: tmp
            mountPath: /tmp
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
      volumes:
      - name: config-file
        secret:
          secretName: policy-reporter-ui-config
          optional: true
      - name: tmp
        emptyDir: {}
