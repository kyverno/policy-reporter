/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1alpha1 "github.com/kyverno/policy-reporter/pkg/crd/api/targetconfig/v1alpha1"
)

// TargetConfigLister helps list TargetConfigs.
// All objects returned here must be treated as read-only.
type TargetConfigLister interface {
	// List lists all TargetConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetConfig, err error)
	// TargetConfigs returns an object that can list and get TargetConfigs.
	TargetConfigs(namespace string) TargetConfigNamespaceLister
	TargetConfigListerExpansion
}

// targetConfigLister implements the TargetConfigLister interface.
type targetConfigLister struct {
	indexer cache.Indexer
}

// NewTargetConfigLister returns a new TargetConfigLister.
func NewTargetConfigLister(indexer cache.Indexer) TargetConfigLister {
	return &targetConfigLister{indexer: indexer}
}

// List lists all TargetConfigs in the indexer.
func (s *targetConfigLister) List(selector labels.Selector) (ret []*v1alpha1.TargetConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetConfig))
	})
	return ret, err
}

// TargetConfigs returns an object that can list and get TargetConfigs.
func (s *targetConfigLister) TargetConfigs(namespace string) TargetConfigNamespaceLister {
	return targetConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TargetConfigNamespaceLister helps list and get TargetConfigs.
// All objects returned here must be treated as read-only.
type TargetConfigNamespaceLister interface {
	// List lists all TargetConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetConfig, err error)
	// Get retrieves the TargetConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TargetConfig, error)
	TargetConfigNamespaceListerExpansion
}

// targetConfigNamespaceLister implements the TargetConfigNamespaceLister
// interface.
type targetConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TargetConfigs in the indexer for a given namespace.
func (s targetConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TargetConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetConfig))
	})
	return ret, err
}

// Get retrieves the TargetConfig from the indexer for a given namespace and name.
func (s targetConfigNamespaceLister) Get(name string) (*v1alpha1.TargetConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("targetconfig"), name)
	}
	return obj.(*v1alpha1.TargetConfig), nil
}
