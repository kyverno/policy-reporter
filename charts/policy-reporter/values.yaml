# Override the chart name used for all resources
nameOverride: ""

# overwrite the fullname of all resources
fullnameOverride: "policy-reporter"

# configure the namespace of all resources
namespaceOverride: ""

image:
  registry: ghcr.io
  repository: kyverno/policy-reporter
  pullPolicy: IfNotPresent
  tag: 5a06aac

imagePullSecrets: []

priorityClassName: ""

replicaCount: 1

revisionHistoryLimit: 10

deploymentStrategy: {}
  # rollingUpdate:
  #  maxSurge: 25%
  #  maxUnavailable: 25%
  # type: RollingUpdate

# When using a custom port together with the PolicyReporter UI
# the port has also to be changed in the UI subchart as well because it can't access the parent values.
# You can change the port under `ui.policyReporter.port`
port:
  name: http
  number: 8080

# Key/value pairs that are attached to all resources.
annotations: {}

# Create cluster role policies
rbac:
  enabled: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  enabled: true
  ## configuration of service
  # key/value
  annotations: {}
  # key/value
  labels: {}
  type: ClusterIP
  # integer number. This is port for service
  port: 8080

podSecurityContext:
  fsGroup: 1234

securityContext:
  runAsUser: 1234
  runAsNonRoot: true
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

# Key/value pairs that are attached to pods.
podAnnotations: {}

# Key/value pairs that are attached to pods.
podLabels: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   memory: 100Mi
  #   cpu: 10m
  # requests:
  #   memory: 75Mi
  #   cpu: 5m

# Enable a NetworkPolicy for this chart. Useful on clusters where Network Policies are
# used and configured in a default-deny fashion.
networkPolicy:
  enabled: false
  # Kubernetes API Server
  egress:
  - to:
    ports:
    - protocol: TCP
      port: 6443
  ingress: []

## Set to true to enable ingress record generation
# ref to: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  # key/value
  labels: {}
  # key/value
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

logging:
  encoding: console # possible encodings are console and json
  logLevel: 0 # default info
  development: false # more human readable structure, enables stacktraces and removes log sampling

api:
  logging: false # enable debug API access logging, sets logLevel to debug

# REST API
rest:
  enabled: false

# Prometheus Metrics API
metrics:
  enabled: false
  mode: detailed # available modes are detailed, simple and custom
  customLabels: [] # only used for custom mode. Supported fields are: ["namespace", "rule", "policy", "report" // PolicyReport name, "kind" // resource kind, "name" // resource name, "status", "severity", "category", "source"]
#  filter:
#    sources:
#      exclude: ["Trivy CIS Kube Bench"]
#    status:
#      exclude: ["pass", "skip"]

profiling:
  enabled: false

# amount of queue workers for PolicyReport resource processing
worker: 5

# Filter PolicyReport resources to process
reportFilter:
  namespaces:
    # Process only PolicyReport resources from an included namespace, wildcards are supported
    include: []
    # Ignore all PolicyReport resources from a excluded namespace, wildcards are supported
    # exclude will be ignored if an include filter exists
    exclude: []
  clusterReports:
    # Disable the processing of ClusterPolicyReports
    disabled: false

# -- Source based PolicyReport filter
sourceFilters:
  # -- PolicyReport selector.
- selector:
    # -- select PolicyReport by source
    source: kyverno
  # -- Filter out PolicyReports of controlled Pods and Jobs, only works for PolicyReport with scope resource
  uncontrolledOnly: true
  # -- Filter out ClusterPolicyReports
  disableClusterReports: false
  # -- Filter out PolicyReports based on the scope resource kind
  kinds:
    exclude: [ReplicaSet]

kyverno-plugin:
  enabled: false

trivy-plugin:
  enabled: false

global:
  # additional labels added on each resource
  labels: {}

# basicAuth for APIs and metrics
basicAuth:
  # HTTP BasicAuth username
  username: ""
  # HTTP BasicAuth password
  password: ""
  # read credentials from secret
  secretRef: ""

emailReports:
  clusterName: "" # (optional) - displayed in the email report if configured
  titlePrefix: "Report" # title prefix in the email subject
  resources: {}
  smtp:
    secret: "" # (optional) secret name to provide the complete or partial SMTP configuration
    host: ""
    port: 465
    username: ""
    password: ""
    from: "" # displayed from email address
    encryption: "" # default is none, supports ssl/tls and starttls
    skipTLS: false
    certificate: ""

  # basic summary report
  summary:
    enabled: false
    schedule: "0 8 * * *" # CronJob schedule defines when the report will be send
    activeDeadlineSeconds: 300 # timeout in seconds
    backoffLimit: 3 # retry counter
    ttlSecondsAfterFinished: 0
    restartPolicy: Never # pod restart policy

    to: [] # list of receiver email addresses
    filter: {} # optional filters
    #  disableClusterReports: false # remove ClusterPolicyResults from Reports
    #  namespaces:
    #    include: []
    #    exclude: []
    #  sources:
    #    include: []
    #    exclude: []
    channels: [] # (optional) channels can be used to to send only a subset of namespaces / sources to dedicated email addresses    channels: [] # (optional) channels can be used to to send only a subset of namespaces / sources to dedicated email addresses
    #  - to: ['team-a@company.org']
    #    filter:
    #      disableClusterReports: true
    #      namespaces:
    #        include: ['team-a-*']
    #      sources:
    #        include: ['Kyverno']
  # violation summary report
  violations:
    enabled: false
    schedule: "0 8 * * *" # CronJob schedule defines when the report will be send
    activeDeadlineSeconds: 300 # timeout in seconds
    backoffLimit: 3 # retry counter
    ttlSecondsAfterFinished: 0
    restartPolicy: Never # pod restart policy

    to: [] # list of receiver email addresses
    filter: {} # optional filters
    #  disableClusterReports: false # remove ClusterPolicyResults from Reports
    #  namespaces:
    #    include: []
    #    exclude: []
    #  sources:
    #    include: []
    #    exclude: []
    channels: [] # (optional) channels can be used to to send only a subset of namespaces / sources to dedicated email addresses    channels: [] # (optional) channels can be used to to send only a subset of namespaces / sources to dedicated email addresses
    #  - to: ['team-a@company.org']
    #    filter:
    #      disableClusterReports: true
    #      namespaces:
    #        include: ['team-a-*']
    #      sources:
    #        include: ['Kyverno']

# Reference a configuration which already exists instead of creating one
existingTargetConfig:
  enabled: false
  # Name of the secret with the config
  name: ""
  # subPath within the secret (defaults to config.yaml)
  subPath: ""

# Supported targets for new PolicyReport Results
target:
  loki:
    # loki host address
    host: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # receive the host from an existing secret instead
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # loki api path, defaults to "/api/prom/push" (deprecated)
    path: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to loki
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional labels to each Loki event
    customFields: {}
    # Additional custom HTTP Headers
    headers: {}
    # HTTP BasicAuth credentials for Loki
    username: ""
    password: ""
    # Filter Results which should send to this target by report labels, namespaces, priorities or policies
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
#      namespaces:
#        include: ["develop"]
#      priorities:
#        exclude: ["debug", "info", "error"]
#      labels:
#        include: ["app", "owner:team-a", "monitoring:*"]
    channels: []
#    - host: "http://loki.loki-stack:3100"
#      sources: []
#      customLabels: {}
#      filter:
#        namespaces:
#          include: ["develop"]
#        priorities:
#          exclude: ["debug", "info", "error"]
#        reportLabels:
# .         include: ["app", "owner:team-b"]

  elasticsearch:
    # elasticsearch host address
    host: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # elasticsearch index (default: policy-reporter)
    index: "policy-reporter"
    # elasticsearch username für HTTP Basic Auth
    username: ""
    # elasticsearch password für HTTP Basic Auth
    password: ""
    # elasticsearch apiKey für apiKey authentication
    apiKey: ""
    # receive the host, username and/or password,apiKey from an existing secret instead
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # elasticsearch index rotation and index suffix
    # possible values: daily, monthly, annually, none (default: daily)
    rotation: "daily"
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to elasticsearch
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # https://www.elastic.co/blog/moving-from-types-to-typeless-apis-in-elasticsearch-7-0 keeping as false for retrocompatibility.
    typelessApi: false
    # Added as additional properties to each elasticsearch event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional elasticsearch channels with different configurations and filters
    channels: []

  slack:
    # slack app webhook address
    webhook: ""
    # slack channel
    channel: ""
    # receive the webhook from an existing secret instead
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to slack
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional fields to each Slack event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional slack channels with different configurations and filters
    channels: []
#    - webhook: "https://slack.webhook1"
#      channel: ""
#      filter:
#        namespaces:
#          include: ["develop"]
#        priorities:
#          exclude: ["debug", "info", "error"]
#        policies:
#          include: ["require-run-as-nonroot"]
#        reportLabels:
# .         include: ["app", "owner:team-b"]
#    - webhook: "https://slack.webhook2"
#      minimumPriority: "warning"
#      filter:
#        namespaces:
#          include: ["team-a-*"]

  discord:
    # discord app webhook address
    webhook: ""
    # receive the webhook from an existing secret instead
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to discord
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional discord channels with different configurations and filters
    channels: []

  teams:
    # teams webhook address
    webhook: ""
    # receive the webhook from an existing secret instead
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to teams
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional teams channels with different configurations and filters
    channels: []

  webhook:
    # webhook host address
    host: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # receive the host and/or token from an existing secret, the token is added as Authorization header
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # additional http headers
    headers: {}
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to the UI Log
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional properties to each webhook event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional webhook channels with different configurations and filters
    channels: []

  telegram:
    # telegram bot token
    token: ""
    # telegram chat id
    chatID: ""
    # optional telegram proxy host
    host: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # receive the host and/or token from an existing secret, the token is added as Authorization header
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # additional http headers
    headers: {}
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to telegram
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional properties to each notification
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional telegram channels with different configurations and filters
    channels: []

  googleChat:
    # GoogleChat webhook
    webhook: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # receive the host and/or token from an existing secret, the token is added as Authorization header
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # additional http headers
    headers: {}
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to telegram
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional properties to each notification
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional telegram channels with different configurations and filters
    channels: []

  s3:
    # S3 access key
    accessKeyID: ""
    # S3 secret access key
    secretAccessKey: ""
    # receive the accessKeyID and/or secretAccessKey from an existing secret instead
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # S3 storage region
    region: ""
    # S3 storage endpoint
    endpoint: ""
    # S3 storage, bucket name
    bucket: ""
    # S3 storage to use an S3 Bucket Key for object encryption with SSE-KMS
    bucketKeyEnabled: false
    # S3 storage KMS Key ID for object encryption with SSE-KMS
    kmsKeyId: ""
    # S3 storage server-side encryption algorithm used when storing this object in Amazon S3, AES256, aws:kms
    serverSideEncryption: ""
    # S3 storage, force path style configuration
    pathStyle: false
    # name of prefix, keys will have format: s3://<bucket>/<prefix>/YYYY-MM-DD/YYYY-MM-DDTHH:mm:ss.s+01:00.json
    prefix: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to S3
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional properties to each s3 event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional s3 channels with different configurations and filters
    channels: []

  kinesis:
    # AWS access key
    accessKeyID: ""
    # AWS secret access key
    secretAccessKey: ""
    # receive the accessKeyID and/or secretAccessKey from an existing secret instead
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # AWS region
    region: ""
    # AWS Kinesis endpoint
    endpoint: ""
    # AWS Kinesis stream name
    streamName: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to S3
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional properties to each kinesis event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional s3 channels with different configurations and filters
    channels: []

  securityHub:
    # AWS access key
    accessKeyID: ""
    # AWS secret access key
    secretAccessKey: ""
    # receive the accessKeyID and/or secretAccessKey from an existing secret instead
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # AWS region
    region: ""
    # AWS SecurityHub endpoint (optional)
    endpoint: ""
    # AWS accountID
    accountID: ""
    # Used product name, defaults to "Polilcy Reporter"
    productName: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to S3
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Enable cleanup listener for SecurityHub
    cleanup: false
    # Delay between AWS GetFindings API calls, to avoid hitting the API RequestLimit
    delayInSeconds: 2
    # Added as additional properties to each securityHub event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional s3 channels with different configurations and filters
    channels: []

  gcs:
    # GCS (Google Cloud Storage) Service Accout Credentials
    credentials: ""
    # receive the credentials from an existing secret instead
    secretRef: ""
    # Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # GCS Bucket
    bucket: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to GCS
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional properties to each gcs event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional s3 channels with different configurations and filters
    channels: []

# required when policy-reporter runs in HA mode and you have targets configured
# if no targets are configured, leaderElection is disabled automatically
# will be enabled when replicaCount > 1
leaderElection:
  enabled: false
  releaseOnCancel: true
  leaseDuration: 15
  renewDeadline: 10
  retryPeriod: 2

# use redis as external result cache instead of the in memory cache
redis:
  enabled: false
  address: ""
  database: 0
  prefix: "policy-reporter"
  username: ""
  password: ""

database:
  # Database Type, supported: mysql, postgres, mariadb
  type: ""
  database: "" # Database Name
  username: ""
  password: ""
  host: ""
  enableSSL: false
  # instead of configure the individual values you can also provide an DSN string
  # example postgres: postgres://postgres:password@localhost:5432/postgres?sslmode=disable
  # example mysql: root:password@tcp(localhost:3306)/test?tls=false
  dsn: ""
  # configure an existing secret as source for your values
  # supported fields: username, password, host, dsn, database
  secretRef: ""
  # use an mounted secret as source for your values, required the information in JSON format
  # supported fields: username, password, host, dsn, database
  mountedSecret: ""

# enabled if replicaCount > 1
podDisruptionBudget:
  # -- Configures the minimum available pods for policy-reporter disruptions.
  # Cannot be used if `maxUnavailable` is set.
  minAvailable: 1
  # -- Configures the maximum unavailable pods for policy-reporter disruptions.
  # Cannot be used if `minAvailable` is set.
  maxUnavailable:

# Node labels for pod assignment
# ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Tolerations for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# Anti-affinity to disallow deploying client and master nodes on the same worker node
affinity: {}

# Topology Spread Constraints to better spread pods
topologySpreadConstraints: []

# livenessProbe for policy-reporter
livenessProbe:
  httpGet:
    path: /ready
    port: http

# readinessProbe for policy-reporter
readinessProbe:
  httpGet:
    path: /healthz
    port: http

extraVolumes:
  volumeMounts: []

  volumes: []

# If set the volume for sqlite is freely configurable below "- name: sqlite". If no value is set an emptyDir is used.
sqliteVolume: {}
  # emptyDir:
  #   sizeLimit: 10Mi

# -- Allow additional env variables to be added
envVars: []

# -- Allow custom configuration of the /tmp volume
tmpVolume: {}

ui:
  enabled: false
  image:
      # -- (string) Image registry
    registry: ghcr.io
      # -- (string) Image repository
    repository: kyverno/policy-reporter-ui
      # -- (string) Image PullPolicy
    pullPolicy: IfNotPresent
      # -- (string) Image tag
      # Defaults to `Chart.AppVersion` if omitted
    tag: "2.0.0-alpha.49"

  # -- Deployment replica count
  replicaCount: 1

  # -- Temporary Directory to persist session data for authentication
  tempDir: "/tmp"

  logging:
    # -- log encoding
    # possible encodings are console and json
    encoding: console
    # -- log level
    # default info
    logLevel: 0

  server:
    # -- Application port
    port: 8080
    # -- Enables Access logging
    logging: false
    # -- Overwrites Request Host with Proxy Host and adds `X-Forwarded-Host` and `X-Origin-Host` headers
    overwriteHost: true

  openIDConnect:
    # -- Enable openID Connect authentication
    enabled: false
    # -- OpenID Connect Discovery URL
    discoveryUrl: ""
    # -- OpenID Connect Callback URL
    callbackUrl: ""
    # -- OpenID Connect ClientID
    clientId: ""
    # -- OpenID Connect ClientSecret
    clientSecret: ""
    # -- OpenID Connect allowed Scopes
    scopes: []
    # -- Provide OpenID Connect configuration via Secret
    # supported keys: `discoveryUrl`, `clientId`, `clientSecret`
    secretRef: ""

  oauth:
    # -- Enable openID Connect authentication
    enabled: false
    # -- OAuth2 Provider
    # supported: amazon, gitlab, github, apple, google, yandex, azuread
    provider: ""
    # -- OpenID Connect Callback URL
    callbackUrl: ""
    # -- OpenID Connect ClientID
    clientId: ""
    # -- OpenID Connect ClientSecret
    clientSecret: ""
    # -- OpenID Connect allowed Scopes
    scopes: []
    # -- Provide OpenID Connect configuration via Secret
    # supported keys: `provider`, `clientId`, `clientSecret`
    secretRef: ""

  # -- DisplayMode dark/light
  # uses the OS configured prefered color scheme as default
  displayMode: ""

  # -- Additional customizable dashboards
  customBoards: []
  # - name: Team A
  #   namespaces:
  #     # -- list of displayed namespaces
  #     list: []
  #     # -- selector for displayed namespaces
  #     selector:
  #       team: team-a
  #   sources:
  #     # -- list of displayed sources
  #     list: []
  #   clusterScope:
  #     # -- disply cluster scoped resources and results
  #     enabled: false

  # -- source specific configurations
  sources:
      # -- kyverno specific UI confiurations
    - name: kyverno
      # -- enabled action button to generate PolicyExceptions from the UI
      exceptions: false
      # -- exclude Pod, Job and Replica resources from kyverno results by default if no kinds are specified
      excludes:
        results:
        - warn
        - error

  # -- Connected Policy Reporter APIs
  clusters:
  - name: Default
    secretRef: policy-report-ui-default-cluster
  # - name: default
  #   host: http://policy-reporter:8080
  #   secretRef: ""
  #   skipTLS: false
  #   certificate: ""
  #   plugins:
  #   - name: kyverno
  #     host: http://policy-reporter-kyverno-plugin:8080

  # -- Image pull secrets for image verification policies, this will define the `--imagePullSecrets` argument
  imagePullSecrets: []
    # regcred:
    #   registry: foo.example.com
    #   username: foobar
    #   password: secret

  serviceAccount:
    # -- Create ServiceAccount
    create: true
    # -- Enable ServiceAccount automaount
    automount: true
    # -- Annotations for the ServiceAccount
    annotations: {}
    # -- The ServiceAccount name
    name: ""

  # -- Additional annotations to add to each pod
  podAnnotations: {}

  # -- Additional labels to add to each pod
  podLabels: {}

  # -- Deployment update strategy.
  # Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  updateStrategy: {}
  #  rollingUpdate:
  #    maxSurge: 1
  #    maxUnavailable: 40%
  #  type: RollingUpdate

  # -- The number of revisions to keep
  revisionHistoryLimit: 10

  # -- Security context for the pod
  podSecurityContext:
    runAsUser: 1234
    runAsGroup: 1234

  # -- Allow additional env variables to be added
  envVars: []

  rbac:
    # -- Create RBAC resources
    enabled: true

  # -- Container security context
  securityContext:
    runAsUser: 1234
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault

  service:
    # -- Service type.
    type: ClusterIP
    # -- Service port.
    port: 8080
    # -- Service annotations.
    annotations: {}
    # -- Service labels.
    labels: {}

  ingress:
    # -- Create ingress resource.
    enabled: false
    # -- Ingress class name.
    className: ""
    # -- Ingress labels.
    labels: {}
    # -- Ingress annotations.
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- List of ingress host configurations.
    hosts: []
    #  - host: chart-example.local
    #    paths:
    #      - path: /
    #        pathType: ImplementationSpecific
    # -- List of ingress TLS configurations.
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  networkPolicy:
    # -- When true, use a NetworkPolicy to allow ingress to the webhook
    # This is useful on clusters using Calico and/or native k8s network policies in a default-deny setup.
    enabled: false
    # -- A list of valid from selectors according to https://kubernetes.io/docs/concepts/services-networking/network-policies.
    # Enables Kubernetes API Server by default
    egress:
    - ports:
      - protocol: TCP
        port: 6443
    # -- A list of valid from selectors according to https://kubernetes.io/docs/concepts/services-networking/network-policies.
    ingress: []

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # enabled if replicaCount > 1
  podDisruptionBudget:
    # -- Configures the minimum available pods for kyvernoPlugin disruptions.
    # Cannot be used if `maxUnavailable` is set.
    minAvailable: 1
    # -- Configures the maximum unavailable pods for kyvernoPlugin disruptions.
    # Cannot be used if `minAvailable` is set.
    maxUnavailable:

  # -- Node labels for pod assignment
  nodeSelector: {}

  # -- List of node taints to tolerate
  tolerations: []

    # -- Affinity constraints.
  affinity: {}

plugin:
  kyverno:
      # -- (bool) Enable Kyverno Plugin
    enabled: false
    image:
      # -- (string) Image registry
      registry: ghcr.io
        # -- (string) Image repository
      repository: kyverno/policy-reporter/kyverno-plugin
        # -- (string) Image PullPolicy
      pullPolicy: IfNotPresent
        # -- (string) Image tag
        # Defaults to `Chart.AppVersion` if omitted
      tag: "0.0.9"

    # -- Deployment replica count
    replicaCount: 1

    logging:
      # -- log encoding
      # possible encodings are console and json
      encoding: console
      # -- log level
      # default info
      logLevel: 0

    server:
      # -- Application port
      port: 8080
      # -- Enables Access logging
      logging: false

    blockReports:
      # -- Enables he BlockReport feature
      enabled: false
      # -- Watches for Kyverno Events in the configured namespace
      # leave blank to watch in all namespaces
      eventNamespace: default
      results:
        # -- Max items per PolicyReport resource
        maxPerReport: 200
        # -- Keep only the latest of duplicated events
        keepOnlyLatest: false

    # -- Image pull secrets for image verification policies, this will define the `--imagePullSecrets` argument
    imagePullSecrets: []
      # regcred:
      #   registry: foo.example.com
      #   username: foobar
      #   password: secret

    serviceAccount:
      # -- Create ServiceAccount
      create: true
      # -- Enable ServiceAccount automaount
      automount: true
      # -- Annotations for the ServiceAccount
      annotations: {}
      # -- The ServiceAccount name
      name: ""

    # -- Additional annotations to add to each pod
    podAnnotations: {}

    # -- Additional labels to add to each pod
    podLabels: {}

    # -- Deployment update strategy.
    # Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    updateStrategy: {}
    #  rollingUpdate:
    #    maxSurge: 1
    #    maxUnavailable: 40%
    #  type: RollingUpdate

    # -- The number of revisions to keep
    revisionHistoryLimit: 10

    # -- Security context for the pod
    podSecurityContext:
      runAsUser: 1234
      runAsGroup: 1234

    # -- Allow additional env variables to be added
    envVars: []

    rbac:
      # -- Create RBAC resources
      enabled: true

    # -- Container security context
    securityContext:
      runAsUser: 1234
      runAsNonRoot: true
      privileged: false
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault

    service:
      # -- Service type.
      type: ClusterIP
      # -- Service port.
      port: 8080
      # -- Service annotations.
      annotations: {}
      # -- Service labels.
      labels: {}

    ingress:
      # -- Create ingress resource.
      enabled: false
      # -- Ingress class name.
      className: ""
      # -- Ingress labels.
      labels: {}
      # -- Ingress annotations.
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      # -- List of ingress host configurations.
      hosts: []
      #  - host: chart-example.local
      #    paths:
      #      - path: /
      #        pathType: ImplementationSpecific
      # -- List of ingress TLS configurations.
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

    networkPolicy:
      # -- When true, use a NetworkPolicy to allow ingress to the webhook
      # This is useful on clusters using Calico and/or native k8s network policies in a default-deny setup.
      enabled: false
      # -- A list of valid from selectors according to https://kubernetes.io/docs/concepts/services-networking/network-policies.
      # Enables Kubernetes API Server by default
      egress:
      - ports:
        - protocol: TCP
          port: 6443
      # -- A list of valid from selectors according to https://kubernetes.io/docs/concepts/services-networking/network-policies.
      ingress: []

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    # required for HA mode
    # if "blockReports" is disabled, leaderElection is also disabled automatically
    # will be enabled when replicaCount > 1
    leaderElection:
      # -- Enables LeaderElection.
      enabled: false
      # -- Lock Name
      lockName: kyverno-plugin
      # -- Released lock when the run context is cancelled.
      releaseOnCancel: true
      # -- LeaseDuration is the duration that non-leader candidates will wait to force acquire leadership.
      leaseDuration: 15
      # -- RenewDeadline is the duration that the acting master will retry refreshing leadership before giving up.
      renewDeadline: 10
      # -- RetryPeriod is the duration the LeaderElector clients should wait between tries of actions.
      retryPeriod: 2

    # enabled if replicaCount > 1
    podDisruptionBudget:
      # -- Configures the minimum available pods for kyvernoPlugin disruptions.
      # Cannot be used if `maxUnavailable` is set.
      minAvailable: 1
      # -- Configures the maximum unavailable pods for kyvernoPlugin disruptions.
      # Cannot be used if `minAvailable` is set.
      maxUnavailable:

    # -- Node labels for pod assignment
    nodeSelector: {}

    # -- List of node taints to tolerate
    tolerations: []

      # -- Affinity constraints.
    affinity: {}

  trivy:
      # -- (bool) Enable Trivy Operator Plugin
    enabled: false
    image:
      # -- (string) Image registry
      registry: ghcr.io
        # -- (string) Image repository
      repository: kyverno/policy-reporter/trivy-plugin
        # -- (string) Image PullPolicy
      pullPolicy: IfNotPresent
        # -- (string) Image tag
        # Defaults to `Chart.AppVersion` if omitted
      tag: "0.0.3"

    # -- Deployment replica count
    replicaCount: 1

    logging:
      # -- log encoding
      # possible encodings are console and json
      encoding: console
      # -- log level
      # default info
      logLevel: 0

    server:
      # -- Application port
      port: 8080
      # -- Enables Access logging
      logging: false

    policyReporter:
      # -- Skip TLS Verification
      skipTLS: false
      # -- TLS Certificate
      certificate: ""
      # -- Secret to read the API configuration from
      # supports `host`, `certificate`, `skipTLS`, `username`, `password` key
      secretRef: ""

    # -- Image pull secrets for image verification policies, this will define the `--imagePullSecrets` argument
    imagePullSecrets: []
      # regcred:
      #   registry: foo.example.com
      #   username: foobar
      #   password: secret

    serviceAccount:
      # -- Create ServiceAccount
      create: true
      # -- Enable ServiceAccount automaount
      automount: true
      # -- Annotations for the ServiceAccount
      annotations: {}
      # -- The ServiceAccount name
      name: ""

    # -- Additional annotations to add to each pod
    podAnnotations: {}

    # -- Additional labels to add to each pod
    podLabels: {}

    # -- Deployment update strategy.
    # Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    updateStrategy: {}
    #  rollingUpdate:
    #    maxSurge: 1
    #    maxUnavailable: 40%
    #  type: RollingUpdate

    # -- The number of revisions to keep
    revisionHistoryLimit: 10

    # -- Security context for the pod
    podSecurityContext:
      runAsUser: 1234
      runAsGroup: 1234

    # -- Allow additional env variables to be added
    envVars: []

    rbac:
      # -- Create RBAC resources
      enabled: true

    # -- Container security context
    securityContext:
      runAsUser: 1234
      runAsNonRoot: true
      privileged: false
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault

    service:
      # -- Service type.
      type: ClusterIP
      # -- Service port.
      port: 8080
      # -- Service annotations.
      annotations: {}
      # -- Service labels.
      labels: {}

    ingress:
      # -- Create ingress resource.
      enabled: false
      # -- Ingress class name.
      className: ""
      # -- Ingress labels.
      labels: {}
      # -- Ingress annotations.
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      # -- List of ingress host configurations.
      hosts: []
      #  - host: chart-example.local
      #    paths:
      #      - path: /
      #        pathType: ImplementationSpecific
      # -- List of ingress TLS configurations.
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

    networkPolicy:
      # -- When true, use a NetworkPolicy to allow ingress to the webhook
      # This is useful on clusters using Calico and/or native k8s network policies in a default-deny setup.
      enabled: false
      # -- A list of valid from selectors according to https://kubernetes.io/docs/concepts/services-networking/network-policies.
      # Enables Kubernetes API Server by default
      egress:
      - ports:
        - protocol: TCP
          port: 6443
      # -- A list of valid from selectors according to https://kubernetes.io/docs/concepts/services-networking/network-policies.
      ingress: []

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    # enabled if replicaCount > 1
    podDisruptionBudget:
      # -- Configures the minimum available pods for kyvernoPlugin disruptions.
      # Cannot be used if `maxUnavailable` is set.
      minAvailable: 1
      # -- Configures the maximum unavailable pods for kyvernoPlugin disruptions.
      # Cannot be used if `minAvailable` is set.
      maxUnavailable:

    # -- Node labels for pod assignment
    nodeSelector: {}

    # -- List of node taints to tolerate
    tolerations: []

      # -- Affinity constraints.
    affinity: {}

monitoring:
  enabled: false

  # Key/value pairs that are attached to all resources.
  annotations: {}

  serviceMonitor:
    # HonorLabels chooses the metrics labels on collisions with target labels
    honorLabels: false
    # allow to override the namespace for serviceMonitor
    namespace:
    # labels to match the serviceMonitorSelector of the Prometheus Resource
    labels: {}
    # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
    relabelings: []
    # see serviceMonitor.relabelings
    metricRelabelings: []
    # optional namespaceSelector
    namespaceSelector: {}
    # optional scrapeTimeout
    scrapeTimeout:
    # optional scrape interval
    interval:

  grafana:
    # namespace for configMap of grafana dashboards
    namespace:
    dashboards:
      # Enable the deployment of grafana dashboards
      enabled: true
      # Label to find dashboards using the k8s sidecar
      label: grafana_dashboard
      value: "1"
      labelFilter: []
      multicluster:
        enabled: false
        label: cluster
      enable:
        overview: true
        policyReportDetails: true
        clusterPolicyReportDetails: true
    folder:
      # Annotation to enable folder storage using the k8s sidecar
      annotation: grafana_folder
      # Grafana folder in which to store the dashboards
      name: Policy Reporter
    datasource:
      label: Prometheus
      pluginId: prometheus
      pluginName: Prometheus

  policyReportDetails:
    firstStatusRow:
      height: 8
    secondStatusRow:
      enabled: true
      height: 2
    statusTimeline:
      enabled: true
      height: 8
    passTable:
      enabled: true
      height: 8
    failTable:
      enabled: true
      height: 8
    warningTable:
      enabled: true
      height: 4
    errorTable:
      enabled: true
      height: 4

  clusterPolicyReportDetails:
    statusRow:
      height: 6
    statusTimeline:
      enabled: true
      height: 8
    passTable:
      enabled: true
      height: 8
    failTable:
      enabled: true
      height: 8
    warningTable:
      enabled: true
      height: 4
    errorTable:
      enabled: true
      height: 4

  policyReportOverview:
    failingSummaryRow:
      height: 8
    failingTimeline:
      height: 10
    failingPolicyRuleTable:
      height: 10
    failingClusterPolicyRuleTable:
      height: 10
