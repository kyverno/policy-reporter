# Override the chart name used for all resources
nameOverride: ""

image:
  registry: ghcr.io
  repository: kyverno/policy-reporter
  pullPolicy: IfNotPresent
  tag: 2.13.0

imagePullSecrets: []

replicaCount: 1

deploymentStrategy: {}
  # rollingUpdate:
  #  maxSurge: 25%
  #  maxUnavailable: 25%
  # type: RollingUpdate

# When using a custom port together with the PolicyReporter UI
# the port has also to be changed in the UI subchart as well because it can't access the parent values.
# You can change the port under `ui.policyReporter.port`
port:
  name: http
  number: 8080

# Key/value pairs that are attached to all resources.
annotations: {}

# Create cluster role policies
rbac:
  enabled: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  enabled: true
  ## configuration of service
  # key/value
  annotations: {}
  # key/value
  labels: {}
  type: ClusterIP
  # integer number. This is port for service
  port: 8080

podSecurityContext:
  fsGroup: 1234

securityContext:
  runAsUser: 1234
  runAsNonRoot: true
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

# Key/value pairs that are attached to pods.
podAnnotations: {}

# Key/value pairs that are attached to pods.
podLabels: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   memory: 100Mi
  #   cpu: 10m
  # requests:
  #   memory: 75Mi
  #   cpu: 5m

# Enable a NetworkPolicy for this chart. Useful on clusters where Network Policies are
# used and configured in a default-deny fashion.
networkPolicy:
  enabled: false
  # Kubernetes API Server
  egress:
  - to:
    ports:
    - protocol: TCP
      port: 6443
  ingress: []

logging:
  encoding: console # possible encodings are console and json
  logLevel: 0 # default info
  development: false # more human readable structure, enables stacktraces and removes log sampling

api:
  logging: false # enable API access and error logging

# REST API
rest:
  enabled: false

# Prometheus Metrics API
metrics:
  enabled: false
  mode: detailed # available modes are detailed, simple and custom
  customLabels: [] # only used for custom mode. Supported fields are: ["namespace", "rule", "policy", "report" // PolicyReport name, "kind" // resource kind, "name" // resource name, "status", "severity", "category", "source"]
#  filter:
#    sources:
#      exclude: ["Trivy CIS Kube Bench"]
#    status:
#      exclude: ["pass", "skip"]

profiling:
  enabled: false

# amount of queue workers for PolicyReport resource processing
worker: 5

# Filter PolicyReport resources to process
reportFilter:
  namespaces:
    # Process only PolicyReport resources from an included namespace, wildcards are supported
    include: []
    # Ignore all PolicyReport resources from a excluded namespace, wildcards are supported
    # exclude will be ignored if an include filter exists
    exclude: []
  clusterReports:
    # Disable the processing of ClusterPolicyReports
    disabled: false

# enable policy-report-ui
ui:
  enabled: false

kyvernoPlugin:
  enabled: false

# Settings for the monitoring subchart
monitoring:
  enabled: false

global:
  # available plugins
  plugins:
    # enable kyverno for Policy Reporter UI and monitoring
    kyverno: false
  # The name of service policy-report. Defaults to ReleaseName.
  backend: ""
  # overwrite the fullname of all resources including subcharts
  fullnameOverride: ""
  # configure the namespace of all resources including subcharts
  namespace: ""
  # additional labels added on each resource
  labels: {}

# configure mappings from policy to priority
# you can use default to configure a default priority for fail results
# example mapping
#   default: warning
#   require-ns-labels: error
policyPriorities: {}

emailReports:
  clusterName: "" # (optional) - displayed in the email report if configured
  smtp:
    secret: "" # (optional) secret name to provide the complete or partial SMTP configuration
    host: ""
    port: 465
    username: ""
    password: ""
    from: "" # displayed from email address
    encryption: "" # default is none, supports ssl/tls and starttls

  # basic summary report
  summary:
    enabled: false
    schedule: "0 8 * * *" # CronJob schedule defines when the report will be send
    activeDeadlineSeconds: 300 # timeout in seconds
    backoffLimit: 3 # retry counter
    ttlSecondsAfterFinished: 0
    restartPolicy: Never # pod restart policy

    to: [] # list of receiver email addresses
    filter: {} # optional filters
    #  disableClusterReports: false # remove ClusterPolicyResults from Reports
    #  namespaces:
    #    include: []
    #    exclude: []
    #  sources:
    #    include: []
    #    exclude: []
    channels: [] # (optional) channels can be used to to send only a subset of namespaces / sources to dedicated email addresses    channels: [] # (optional) channels can be used to to send only a subset of namespaces / sources to dedicated email addresses
    #  - to: ['team-a@company.org']
    #    filter:
    #      disableClusterReports: true
    #      namespaces:
    #        include: ['team-a-*']
    #      sources:
    #        include: ['Kyverno']
  # violation summary report
  violations:
    enabled: false
    schedule: "0 8 * * *" # CronJob schedule defines when the report will be send
    activeDeadlineSeconds: 300 # timeout in seconds
    backoffLimit: 3 # retry counter
    ttlSecondsAfterFinished: 0
    restartPolicy: Never # pod restart policy

    to: [] # list of receiver email addresses
    filter: {} # optional filters
    #  disableClusterReports: false # remove ClusterPolicyResults from Reports
    #  namespaces:
    #    include: []
    #    exclude: []
    #  sources:
    #    include: []
    #    exclude: []
    channels: [] # (optional) channels can be used to to send only a subset of namespaces / sources to dedicated email addresses    channels: [] # (optional) channels can be used to to send only a subset of namespaces / sources to dedicated email addresses
    #  - to: ['team-a@company.org']
    #    filter:
    #      disableClusterReports: true
    #      namespaces:
    #        include: ['team-a-*']
    #      sources:
    #        include: ['Kyverno']

# Reference a configuration which already exists instead of creating one
existingTargetConfig:
  enabled: false
  # Name of the secret with the config
  name: ""
  # subPath within the secret (defaults to config.yaml)
  subPath: ""

# Supported targets for new PolicyReport Results
target:
  loki:
    # loki host address
    host: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # receive the host from an existing secret instead
    secretRef: ""
    # loki api path, defaults to "/api/prom/push" (deprecated)
    path: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to loki
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional labels to each Loki event
    customLabels: {}
    # Filter Results which should send to this target by report labels, namespaces, priorities or policies
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
#      namespaces:
#        include: ["develop"]
#      priorities:
#        exclude: ["debug", "info", "error"]
#      labels:
#        include: ["app", "owner:team-a", "monitoring:*"]
    channels: []
#    - host: "http://loki.loki-stack:3100"
#      sources: []
#      customLabels: {}
#      filter:
#        namespaces:
#          include: ["develop"]
#        priorities:
#          exclude: ["debug", "info", "error"]
#        reportLabels:
# .         include: ["app", "owner:team-b"]

  elasticsearch:
    # elasticsearch host address
    host: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # elasticsearch index (default: policy-reporter)
    index: ""
    # elasticsearch username für HTTP Basic Auth
    username: ""
    # elasticsearch password für HTTP Basic Auth
    password: ""
    # receive the host, username and/or password from an existing secret instead
    secretRef: ""
    # elasticsearch index rotation and index suffix
    # possible values: daily, monthly, annually, none (default: daily)
    rotation: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to elasticsearch
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional properties to each elasticsearch event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional elasticsearch channels with different configurations and filters
    channels: []

  slack:
    # slack app webhook address
    webhook: ""
    # receive the webhook from an existing secret instead
    secretRef: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to slack
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional fields to each Slack event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional slack channels with different configurations and filters
    channels: []
#    - webhook: "https://slack.webhook1"
#      filter:
#        namespaces:
#          include: ["develop"]
#        priorities:
#          exclude: ["debug", "info", "error"]
#        policies:
#          include: ["require-run-as-nonroot"]
#        reportLabels:
# .         include: ["app", "owner:team-b"]
#    - webhook: "https://slack.webhook2"
#      minimumPriority: "warning"
#      filter:
#        namespaces:
#          include: ["team-a-*"]

  discord:
    # discord app webhook address
    webhook: ""
    # receive the webhook from an existing secret instead
    secretRef: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to discord
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional discord channels with different configurations and filters
    channels: []

  teams:
    # teams webhook address
    webhook: ""
    # receive the webhook from an existing secret instead
    secretRef: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to teams
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional teams channels with different configurations and filters
    channels: []

  ui:
    # ui host address
    host: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # minimum priority "" < info < warning < critical < error
    minimumPriority: "warning"
    # list of sources which should send to the UI Log
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true

  webhook:
    # webhook host address
    host: ""
    # path to your custom certificate
    # can be added under extraVolumes
    certificate: ""
    # skip TLS verification if necessary
    skipTLS: false
    # receive the host and/or token from an existing secret, the token is added as Authorization header
    secretRef: ""
    # additional http headers
    headers: {}
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to the UI Log
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional properties to each webhook event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional webhook channels with different configurations and filters
    channels: []

  s3:
    # S3 access key
    accessKeyID: ""
    # S3 secret access key
    secretAccessKey: ""
    # receive the accessKeyID and/or secretAccessKey from an existing secret instead
    secretRef: ""
    # S3 storage region
    region: ""
    # S3 storage endpoint
    endpoint: ""
    # S3 storage, bucket name
    bucket: ""
    # S3 storage, force path style configuration
    pathStyle: false
    # name of prefix, keys will have format: s3://<bucket>/<prefix>/YYYY-MM-DD/YYYY-MM-DDTHH:mm:ss.s+01:00.json
    prefix: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to S3
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional properties to each s3 event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional s3 channels with different configurations and filters
    channels: []

  kinesis:
    # AWS access key
    accessKeyID: ""
    # AWS secret access key
    secretAccessKey: ""
    # receive the accessKeyID and/or secretAccessKey from an existing secret instead
    secretRef: ""
    # AWS region
    region: ""
    # AWS Kinesis endpoint
    endpoint: ""
    # AWS Kinesis stream name
    streamName: ""
    # minimum priority "" < info < warning < critical < error
    minimumPriority: ""
    # list of sources which should send to S3
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # Added as additional properties to each kinesis event
    customFields: {}
    # filter results send by namespaces, policies and priorities
    filter: {}
    # add additional s3 channels with different configurations and filters
    channels: []

# required when policy-reporter runs in HA mode and you have targets configured
# if no targets are configured, leaderElection is disabled automatically
# will be enabled when replicaCount > 1
leaderElection:
  enabled: false
  releaseOnCancel: true
  leaseDuration: 15
  renewDeadline: 10
  retryPeriod: 2

# use redis as external result cache instead of the in memory cache
redis:
  enabled: false
  address: ""
  database: 0
  prefix: "policy-reporter"
  username: ""
  password: ""

# enabled if replicaCount > 1
podDisruptionBudget:
  # -- Configures the minimum available pods for policy-reporter disruptions.
  # Cannot be used if `maxUnavailable` is set.
  minAvailable: 1
  # -- Configures the maximum unavailable pods for policy-reporter disruptions.
  # Cannot be used if `minAvailable` is set.
  maxUnavailable:

# Node labels for pod assignment
# ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Tolerations for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# Anti-affinity to disallow deploying client and master nodes on the same worker node
affinity: {}

# Topology Spread Constraints to better spread pods
topologySpreadConstraints: []

# livenessProbe for policy-reporter
livenessProbe:
  httpGet:
    path: /ready
    port: http

# readinessProbe for policy-reporter
readinessProbe:
  httpGet:
    path: /healthz
    port: http

extraVolumes:
  volumeMounts: []

  volumes: []

# If set the volume for sqlite is freely configurable below "- name: sqlite". If no value is set an emptyDir is used.
sqliteVolume: {}
  # emptyDir:
  #   sizeLimit: 10Mi
